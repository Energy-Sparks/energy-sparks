# PROTOTYPE
#
# Explores using the average school frame work to generate benchmark and exemplar data
# to potentially replace the hard-coded values in BenchmarkMetrics.
#
# Uses the average school data in the project to produce the benchmark values and
# some sample schools (whose unvalidated data must be available) as a model for
# holidays, etc.
#
# The output is a set of metrics for a single pupil version of that school.
# These are generated as a ruby class that will hold the values
#
# This isn't ready for production use because:
#
# - the gas data produced by the average school framework is not usable as there
# are modelling/analysis issues to resolve. So the derived metrics also have problems
#
# - there's been no impact analysis on how different these values are from the existing
# ones we're using.

# - we're likely to want values in the database, not hard-coded. So overall approach likely to be
# different.
#
# - it doesn't produce values for all school types
#
# NB this works off the representation held in the code base not the ruby
#    generated by this script, so to get an up to date version copy the generated ruby code across,
#    run the script, and then copy  the generated ruby code back into the analytics library again
require 'require_all'
require_relative '../../lib/dashboard.rb'
require_rel '../../test_support'

module Logging
  @logger = Logger.new('log/benchmark exemplar school meta data generation ' + Time.now.strftime('%H %M') + '.log')
  logger.level = :debug
end

def load_school(school_name_pattern_match)
  source_db = :unvalidated_meter_data
  school_names = SchoolFactory.instance.school_file_list(source_db, [school_name_pattern_match])
  school = SchoolFactory.instance.load_school(source_db, school_names.first, cache: true)
end

def average_peak(school, amr_data, start_date, end_date)
  school_day_peak_kws = []

  (start_date..end_date).each do |date|
    school_day_peak_kws.push(amr_data.peak_kw(date)) if school.holidays.day_type(date) == :schoolday
  end

  school_day_peak_kws.sum / school_day_peak_kws.count
end

def calculate_benchmark_electricity_metadata(benchmark_type, fuel_type, school_type, school)
  avg = AverageSchoolCalculator.new(school)
  amr_data = avg.normalised_amr_data(benchmark_type: benchmark_type, fuel_type: fuel_type)

  baseload = amr_data.average_overnight_baseload_kw_date_range
  start_date = amr_data.end_date - 364
  annual_kwh = amr_data.kwh_date_range(start_date, amr_data.end_date)
  peak_kw_per_pupil = average_peak(school, amr_data, start_date, amr_data.end_date)

  puts "Able to calculate metadata for #{benchmark_type} #{fuel_type} #{school_type} #{school.name}"

  # include *100 pupil results as its easier to visually check
  # e.g. 2x x100 = single form entry primary, 10x x100 = average secondary
  {
    per_pupil_baseload_kw:            baseload,
    per_100_pupil_baseload_kw:        baseload * 100,
    annual_per_pupil_kwh:             annual_kwh,
    annual_per_100_pupils_kwh:        annual_kwh * 100,
    peak_schoolday_per_pupil_kw:      peak_kw_per_pupil,
    peak_schoolday_per_100_pupils_kw: peak_kw_per_pupil * 100,
  }
rescue => e
  puts "Unable to calculate metadata for #{benchmark_type} #{fuel_type} #{school_type} #{school.name}"
  puts e.message
  puts e.backtrace
  nil
end

def calculate_benchmark_gas_metadata(benchmark_type, _fuel_type, _school_type, school)
  avg = AverageSchoolCalculator.new(school)
  amr_data = avg.normalised_amr_data(benchmark_type: benchmark_type, fuel_type: :gas, degreeday_adjustment: false)

  end_date   = school.aggregated_heat_meters.amr_data.end_date
  start_date = end_date - 364

  annual_kwh_per_floor_area = amr_data.kwh_date_range(start_date, end_date, :kwh)

  {
    annual_per_1_m2_floor_area_kwh:     annual_kwh_per_floor_area,
    annual_per_1000_m2_floor_area_kwh:  annual_kwh_per_floor_area * 1000.0,
  }
end

def add_metadata_deprecated(data)
  data.each do |fuel_type, benchmark_type_data|
    benchmark_type_data.each do |benchmark_type, school_type_data|
      school_type_data.keys.each do |school_type|
        data[fuel_type][benchmark_type][school_type][:metadata] = calculate_benchmark_electricity_metadata(benchmark_type, fuel_type, school_type)
      end
    end
  end

  data
end

def save_metadata_to_ruby(f, metadata)
  f.puts '          metadata: {'
  metadata.each do |type, data|
    f.puts "            #{type}: #{data},"
  end
  f.puts '          },'
end

example_schools = { # doesn't really matter which ones except need ok holidays and up to date data
  secondary: 'king-james*',
  primary:   'abbey-hey*',
  special:   'chalk-hill*'
}

results = Hash.new{ |h,k| h[k] = Hash.new(&h.default_proc) }

example_schools.each do |school_type, name_pattern_match|
  school = load_school(name_pattern_match)
  %i[benchmark exemplar average].each do |benchmark_type|
    results[school_type][benchmark_type][:electricity] = calculate_benchmark_electricity_metadata(benchmark_type, :electricity, school_type, school)
    results[school_type][benchmark_type][:gas]         = calculate_benchmark_gas_metadata(benchmark_type, :gas, school_type, school)
  rescue => e
    puts "School calculation failed for #{school.name}"
    puts e.message
  end
end

dir = TestDirectory.instance.results_directory('AverageSchool')
filename = File.join(dir, 'average_school_benchmark_metrics.rb')

File.open(filename, 'w') do |f|
  f.puts "# auto generated by generate_benchmark_metrics.rb"
  f.puts "# Last generated #{Time.now.to_s}"
  f.puts "# gas data is normalised to BenchmarkMetrics::ANNUAL_AVERAGE_DEGREE_DAYS #{BenchmarkMetrics::ANNUAL_AVERAGE_DEGREE_DAYS}"
  f.puts "class AutoGeneratedBenchmarkMetrics"
  f.puts "  def rawdata"
    f.write results.pretty_inspect
    f.puts
  f.puts "  end"
  f.puts "end"
end

puts "benchmark metrics written to #{filename}"
