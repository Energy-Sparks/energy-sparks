# frozen_string_literal: true

RSpec.configure do |config|
  config.before(:each, type: :system) do
    driven_by :rack_test
  end

  # This switches off the puma debug in the test run
  Capybara.server = :puma, { Silent: true }
  # this changes the default from http://www.example.com to http://example.com which works better with rack-test and
  # redirects generated by ApplicationController.after_sign_in_path_for - otherwise rack-test no longer sends cookies
  Capybara.default_host = 'http://example.com'

  # Currently fails two tests
  # Capybara.register_driver :headless_firefox do |app|
  #   options = ::Selenium::WebDriver::Firefox::Options.new
  #   options.args << '--headless'

  #   Capybara::Selenium::Driver.new(app, browser: :firefox, options: options)
  # end

  Capybara.register_driver :headless_chrome do |app|
    # options explained https://peter.sh/experiments/chromium-command-line-switches/
    # no-sandbox
    #   because the user namespace is not enabled in the container by default
    # headless
    #   run w/o actually launching gui
    # disable-gpu
    #   Disables graphics processing unit(GPU) hardware acceleration
    # window-size
    #   sets default window size in case the smaller default size is not enough
    #   we do not want max either, so this is a good compromise

    options = Selenium::WebDriver::Chrome::Options.new
    options.add_argument('headless=new')
    options.add_argument('no-sandbox')
    options.add_argument('disable-gpu')
    options.add_argument('disable-dev-shm-usage')
    options.add_argument('window-size=1400,10000')
    # Uncomment to make all console entries available via
    # page.driver.browser.logs.get(:browser) if needed for debugging.
    # options.add_option("goog:loggingPrefs", {browser: 'ALL'})
    Capybara::Selenium::Driver.new(app, browser: :chrome, options: options)
  end

  config.before(:each, :js, type: :system) do
    @supports_js = true

    # register our custom driver configuration as a known adapter to allow access to
    # cookies in specs that use JS
    ShowMeTheCookies.register_adapter(:headless_chrome, ShowMeTheCookies::Selenium)

    driven_by :headless_chrome
    # driven_by :headless_firefox
    # page.driver.browser.manage.window.resize_to(2800,10000)
  end

  config.after(:each, :js, type: :system) do |example|
    errors = page.driver.browser.logs.get(:browser)
    if errors.present? && !example.metadata.key?(:errors_expected)
      aggregate_failures 'javascript errors' do
        errors.each do |error|
          expect(error.level).not_to eq('SEVERE'), error.message
          next unless error.level == 'WARNING'

          warn 'WARN: javascript warning'
          warn error.message
        end
      end
    end
  end

  def with_retry(exception_class = RSpec::Expectations::ExpectationNotMetError)
    retry_count = 0
    begin
      puts 'running with retry'
      yield
    rescue exception_class => e
      puts "exception #{e} - #{e.message}"
      retry_count += 1
      raise unless retry_count < 5

      sleep(retry_count)
      retry
    end
  end
end
