require 'rails_helper'

describe Amr::DataFeedTranslator do
  let(:sheffield_config) do
    build(:amr_data_feed_config,
      description: 'Sheffield',
      date_format: "%d/%m/%Y",
      mpan_mprn_field: 'MPAN',
      units_field: 'units',
      reading_date_field: 'ConsumptionDate',
      period_field: 'Period',
      reading_fields:   "kWh_1,kWh_2,kWh_3,kWh_4,kWh_5,kWh_6,kWh_7,kWh_8,kWh_9,kWh_10,kWh_11,kWh_12,kWh_13,kWh_14,kWh_15,kWh_16,kWh_17,kWh_18,kWh_19,kWh_20,kWh_21,kWh_22,kWh_23,kWh_24,kWh_25,kWh_26,kWh_27,kWh_28,kWh_29,kWh_30,kWh_31,kWh_32,kWh_33,kWh_34,kWh_35,kWh_36,kWh_37,kWh_38,kWh_39,kWh_40,kWh_41,kWh_42,kWh_43,kWh_44,kWh_45,kWh_46,kWh_47,kWh_48".split(','),
      meter_description_field: 'siteRef',
      header_example: "siteRef,MPAN,ConsumptionDate,Period,units,kWh_1,kWh_2,kWh_3,kWh_4,kWh_5,kWh_6,kWh_7,kWh_8,kWh_9,kWh_10,kWh_11,kWh_12,kWh_13,kWh_14,kWh_15,kWh_16,kWh_17,kWh_18,kWh_19,kWh_20,kWh_21,kWh_22,kWh_23,kWh_24,kWh_25,kWh_26,kWh_27,kWh_28,kWh_29,kWh_30,kWh_31,kWh_32,kWh_33,kWh_34,kWh_35,kWh_36,kWh_37,kWh_38,kWh_39,kWh_40,kWh_41,kWh_42,kWh_43,kWh_44,kWh_45,kWh_46,kWh_47,kWh_48,kVArh_1,kVArh_2,kVArh_3,kVArh_4,kVArh_5,kVArh_6,kVArh_7,kVArh_8,kVArh_9,kVArh_10,kVArh_11,kVArh_12,kVArh_13,kVArh_14,kVArh_15,kVArh_16,kVArh_17,kVArh_18,kVArh_19,kVArh_20,kVArh_21,kVArh_22,kVArh_23,kVArh_24,kVArh_25,kVArh_26,kVArh_27,kVArh_28,kVArh_29,kVArh_30,kVArh_31,kVArh_32,kVArh_33,kVArh_34,kVArh_35,kVArh_36,kVArh_37,kVArh_38,kVArh_39,kVArh_40,kVArh_41,kVArh_42,kVArh_43,kVArh_44,kVArh_45,kVArh_46,kVArh_47,kVArh_48"
    )
  end

  it 'converts array rows to a keyed hash' do
    readings = [
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', '1', 'kwh', '1.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ]

    result = Amr::DataFeedTranslator.new(sheffield_config, readings).perform.first

    expect(result[:mpan_mprn]).to eq('2333300681718')
    expect(result[:reading_date]).to eq('31/12/2019')
    expect(result[:description]).to eq('MEERSBROOK PRIMARY - M1')
    expect(result[:readings].first).to eq('1.20800000')
    expect(result[:readings].last).to eq('1.17700000')
    expect(result[:units]).to eq('kwh')
  end

  it 'adds period for positionally indexed files' do
    sheffield_config.positional_index = true
    readings = [
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', '1', 'kwh', '1.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ]
    result = Amr::DataFeedTranslator.new(sheffield_config, readings).perform.first
    expect(result[:period]).to eq('1')
  end

  it 'removes rows that do not match the expected_units' do
    sheffield_config.expected_units = 'kwh'
    readings = [
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', '1', 'kwh', '1.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', '1', 'LEAD', '2.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ]

    results = Amr::DataFeedTranslator.new(sheffield_config, readings).perform

    expect(results.size).to eq(1)
    expect(results.first[:readings].first).to eq('1.20800000')
  end

  context 'for MyCorona feed' do
    let(:mycorona_config) do
      build(:amr_data_feed_config,
        description: 'MyCorona portal',
        date_format: "%d/%m/%Y",
        mpan_mprn_field: 'Site Name',
        reading_date_field: 'Read date',
        reading_time_field: 'Time',
        reading_fields: [' Actual (KWH)'],
        header_example: "Read date,Time,Site Name, Actual (KWH)"
      )
    end

    let!(:meter_1) { create(:solar_pv_meter, meter_serial_number: '10070831') }
    let!(:meter_2) { create(:solar_pv_meter, meter_serial_number: '10070839') }

    # rubocop:disable RSpec/ExampleLength
    it 'picks imports only, from every other column' do
      readings = [
        # ['Read date','Time','Site Name',' Actual (KWH)'],
        ['01/06/2023', '00:00', '10070831', '0.001'],
        ['01/06/2023', '00:30', '10070831', '0.002'],
        ['01/06/2023', '01:00', '10070831', '0.003'],
        ['01/06/2023', '01:30', '10070831', '0.004'],
        ['01/06/2023', '02:00', '10070831', '0.005'],
        ['01/06/2023', '02:30', '10070831', '0.006'],
        ['01/06/2023', '03:00', '10070831', '0.007'],
        ['01/06/2023', '03:30', '10070831', '0.008'],
        ['01/06/2023', '04:00', '10070831', '0.009'],
        ['01/06/2023', '04:30', '10070831', '0.010'],
        ['01/06/2023', '05:00', '10070831', '0.011'],
        ['01/06/2023', '05:30', '10070831', '0.012'],
        ['01/06/2023', '06:00', '10070831', '0.013'],
        ['01/06/2023', '06:30', '10070831', '0.014'],
        ['01/06/2023', '07:00', '10070831', '0.015'],
        ['01/06/2023', '07:30', '10070831', '0.016'],
        ['01/06/2023', '08:00', '10070831', '0.017'],
        ['01/06/2023', '08:30', '10070831', '0.018'],
        ['01/06/2023', '09:00', '10070831', '0.019'],
        ['01/06/2023', '09:30', '10070831', '0.020'],
        ['01/06/2023', '10:00', '10070831', '0.021'],
        ['01/06/2023', '10:30', '10070831', '0.022'],
        ['01/06/2023', '11:00', '10070831', '0.023'],
        ['01/06/2023', '11:30', '10070831', '0.024'],
        ['01/06/2023', '12:00', '10070831', '0.025'],
        ['01/06/2023', '12:30', '10070831', '0.026'],
        ['01/06/2023', '13:00', '10070831', '0.027'],
        ['01/06/2023', '13:30', '10070831', '0.028'],
        ['01/06/2023', '14:00', '10070831', '0.029'],
        ['01/06/2023', '14:30', '10070831', '0.030'],
        ['01/06/2023', '15:00', '10070831', '0.031'],
        ['01/06/2023', '15:30', '10070831', '0.032'],
        ['01/06/2023', '16:00', '10070831', '0.033'],
        ['01/06/2023', '16:30', '10070831', '0.034'],
        ['01/06/2023', '17:00', '10070831', '0.035'],
        ['01/06/2023', '17:00', '10070831', '0.036'],
        ['01/06/2023', '18:00', '10070831', '0.037'],
        ['01/06/2023', '18:00', '10070831', '0.038'],
        ['01/06/2023', '19:00', '10070831', '0.039'],
        ['01/06/2023', '19:00', '10070831', '0.040'],
        ['01/06/2023', '20:00', '10070831', '0.041'],
        ['01/06/2023', '20:00', '10070831', '0.042'],
        ['01/06/2023', '21:00', '10070831', '0.043'],
        ['01/06/2023', '21:00', '10070831', '0.044'],
        ['01/06/2023', '22:00', '10070831', '0.045'],
        ['01/06/2023', '22:00', '10070831', '0.046'],
        ['01/06/2023', '23:00', '10070831', '0.047'],
        ['01/06/2023', '23:30', '10070831', '0.048'],
        ['02/06/2023', '00:00', '10070831', '0.001'],
        ['02/06/2023', '00:30', '10070831', '0.002'],
        ['02/06/2023', '01:00', '10070831', '0.003'],
        ['02/06/2023', '01:30', '10070831', '0.004'],
        ['02/06/2023', '02:00', '10070831', '0.005'],
        ['02/06/2023', '02:30', '10070831', '0.006'],
        ['02/06/2023', '03:00', '10070831', '0.007'],
        ['02/06/2023', '03:30', '10070831', '0.008'],
        ['02/06/2023', '04:00', '10070831', '0.009'],
        ['02/06/2023', '04:30', '10070831', '0.010'],
        ['02/06/2023', '05:00', '10070831', '0.011'],
        ['02/06/2023', '05:30', '10070831', '0.012'],
        ['02/06/2023', '06:00', '10070831', '0.013'],
        ['02/06/2023', '06:30', '10070831', '0.014'],
        ['02/06/2023', '07:00', '10070831', '0.015'],
        ['02/06/2023', '07:30', '10070831', '0.016'],
        ['02/06/2023', '08:00', '10070831', '0.017'],
        ['02/06/2023', '08:30', '10070831', '0.018'],
        ['02/06/2023', '09:00', '10070831', '0.019'],
        ['02/06/2023', '09:30', '10070831', '0.020'],
        ['02/06/2023', '10:00', '10070831', '0.021'],
        ['02/06/2023', '10:30', '10070831', '0.022'],
        ['02/06/2023', '11:00', '10070831', '0.023'],
        ['02/06/2023', '11:30', '10070831', '0.024'],
        ['02/06/2023', '12:00', '10070831', '0.025'],
        ['02/06/2023', '12:30', '10070831', '0.026'],
        ['02/06/2023', '13:00', '10070831', '0.027'],
        ['02/06/2023', '13:30', '10070831', '0.028'],
        ['02/06/2023', '14:00', '10070831', '0.029'],
        ['02/06/2023', '14:30', '10070831', '0.030'],
        ['02/06/2023', '15:00', '10070831', '0.031'],
        ['02/06/2023', '15:30', '10070831', '0.032'],
        ['02/06/2023', '16:00', '10070831', '0.033'],
        ['02/06/2023', '16:30', '10070831', '0.034'],
        ['02/06/2023', '17:00', '10070831', '0.035'],
        ['02/06/2023', '17:00', '10070831', '0.036'],
        ['02/06/2023', '18:00', '10070831', '0.037'],
        ['02/06/2023', '18:00', '10070831', '0.038'],
        ['02/06/2023', '19:00', '10070831', '0.039'],
        ['02/06/2023', '19:00', '10070831', '0.040'],
        ['02/06/2023', '20:00', '10070831', '0.041'],
        ['02/06/2023', '20:00', '10070831', '0.042'],
        ['02/06/2023', '21:00', '10070831', '0.043'],
        ['02/06/2023', '21:00', '10070831', '0.044'],
        ['02/06/2023', '22:00', '10070831', '0.045'],
        ['02/06/2023', '22:00', '10070831', '0.046'],
        ['02/06/2023', '23:00', '10070831', '0.047'],
        ['02/06/2023', '23:30', '10070831', '0.048']
      ]

      results = Amr::DataFeedTranslator.new(mycorona_config, readings).perform

      expect(results.size).to eq(96)

      expect(results.first[:mpan_mprn]).to eq('10070831')
      expect(results.first[:reading_date]).to eq('01/06/2023')
      expect(results.first[:reading_time]).to eq('00:00')
      expect(results.first[:readings]).to eq(['0.001'])

      expect(results.last[:mpan_mprn]).to eq('10070831')
      expect(results.last[:reading_date]).to eq('02/06/2023')
      expect(results.last[:reading_time]).to eq('23:30')
      expect(results.last[:readings]).to eq(['0.048'])
    end
    # rubocop:enable RSpec/ExampleLength
  end

  context 'for EfT solar feed' do
    let(:eft_config) do
      build(:amr_data_feed_config,
        description: 'EfT',
        date_format: "%H:%M:%S %a %d/%m/%Y",
        mpan_mprn_field: '',
        units_field: 'units',
        reading_date_field: 'DateTime',
        reading_fields:   "kWh_1,kWh_2,kWh_3,kWh_4,kWh_5,kWh_6,kWh_7,kWh_8,kWh_9,kWh_10,kWh_11,kWh_12,kWh_13,kWh_14,kWh_15,kWh_16,kWh_17,kWh_18,kWh_19,kWh_20,kWh_21,kWh_22,kWh_23,kWh_24,kWh_25,kWh_26,kWh_27,kWh_28,kWh_29,kWh_30,kWh_31,kWh_32,kWh_33,kWh_34,kWh_35,kWh_36,kWh_37,kWh_38,kWh_39,kWh_40,kWh_41,kWh_42,kWh_43,kWh_44,kWh_45,kWh_46,kWh_47,kWh_48".split(','),
        meter_description_field: 'Description',
        header_example: "Description,SerialNumber,DateTime,import_total,export_total,kWh_1,_,kWh_2,_,kWh_3,_,kWh_4,_,kWh_5,_,kWh_6,_,kWh_7,_,kWh_8,_,kWh_9,_,kWh_10,_,kWh_11,_,kWh_12,_,kWh_13,_,kWh_14,_,kWh_15,_,kWh_16,_,kWh_17,_,kWh_18,_,kWh_19,_,kWh_20,_,kWh_21,_,kWh_22,_,kWh_23,_,kWh_24,_,kWh_25,_,kWh_26,_,kWh_27,_,kWh_28,_,kWh_29,_,kWh_30,_,kWh_31,_,kWh_32,_,kWh_33,_,kWh_34,_,kWh_35,_,kWh_36,_,kWh_37,_,kWh_38,_,kWh_39,_,kWh_40,_,kWh_41,_,kWh_42,_,kWh_43,_,kWh_44,_,kWh_45,_,kWh_46,_,kWh_47,_,kWh_48",
        expected_units: '',
        msn_field: 'SerialNumber',
        lookup_by_serial_number: true,
      )
    end

    let!(:meter_1) { create(:solar_pv_meter, meter_serial_number: '10070831') }
    let!(:meter_2) { create(:solar_pv_meter, meter_serial_number: '10070839') }

    it 'picks imports only, from every other column' do
      readings = [
        ['10070831', '10070831', '00:13:07 Thu 07/04/2022', '83294159.417', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.121895', '0.000000', '0.399635', '0.000000', '0.756100', '0.000000', '1.137950', '0.000000', '1.524650', '0.000000', '1.825500', '0.000000', '1.618100', '0.000000', '1.478200', '0.000000', '2.088200', '0.000000', '2.045800', '0.000000', '2.190850', '0.000000', '2.860450', '0.000000', '2.912200', '0.000000', '1.213350', '0.000000', '1.885650', '0.000000', '2.116800', '0.000000', '1.517650', '0.000000', '1.855550', '0.000000', '1.435450', '0.000000', '1.340200', '0.000000', '0.933100', '0.000000', '0.760450', '0.000000', '0.548250', '0.000000', '0.110745', '0.000000', '0.035366', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000'],
        ['10070839', '10070839', '00:10:58 Thu 07/04/2022', '84079387.609', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.066830', '0.000000', '0.036760', '0.000000', '0.741800', '0.000000', '0.703950', '0.000000', '1.255700', '0.000000', '2.213050', '0.000000', '2.983500', '0.000000', '2.985250', '0.000000', '3.140100', '0.000000', '3.415300', '0.000000', '3.449850', '0.000000', '3.144750', '0.000000', '2.859600', '0.000000', '2.685850', '0.000000', '3.200550', '0.000000', '2.425800', '0.000000', '2.163900', '0.000000', '1.110500', '0.000000', '0.995000', '0.000000', '0.985400', '0.000000', '0.696800', '0.000000', '0.343965', '0.000000', '0.430185', '0.000000', '0.340685', '0.000000', '0.215565', '0.000000', '0.091900', '0.000000', '0.004118', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000']
      ]

      results = Amr::DataFeedTranslator.new(eft_config, readings).perform

      expect(results.size).to eq(2)
      expect(results.first[:readings].count).to eq(48)
      expect(results.first[:meter_serial_number]).to eq('10070831')
      expect(results.first[:readings][12]).to eq('0.121895')
      expect(results.first[:readings][13]).to eq('0.399635')
      expect(results.first[:readings][14]).to eq('0.756100')
      expect(results.second[:readings].count).to eq(48)
      expect(results.second[:meter_serial_number]).to eq('10070839')
      expect(results.second[:readings][11]).to eq('0.066830')
      expect(results.second[:readings][12]).to eq('0.036760')
      expect(results.second[:readings][13]).to eq('0.741800')
    end

    it 'finds correct meter id and mpan from serial number' do
      readings = [
        ['10070831', '10070831', '00:13:07 Thu 07/04/2022', '83294159.417', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.121895', '0.000000', '0.399635', '0.000000', '0.756100', '0.000000', '1.137950', '0.000000', '1.524650', '0.000000', '1.825500', '0.000000', '1.618100', '0.000000', '1.478200', '0.000000', '2.088200', '0.000000', '2.045800', '0.000000', '2.190850', '0.000000', '2.860450', '0.000000', '2.912200', '0.000000', '1.213350', '0.000000', '1.885650', '0.000000', '2.116800', '0.000000', '1.517650', '0.000000', '1.855550', '0.000000', '1.435450', '0.000000', '1.340200', '0.000000', '0.933100', '0.000000', '0.760450', '0.000000', '0.548250', '0.000000', '0.110745', '0.000000', '0.035366', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000'],
        ['10070839', '10070839', '00:10:58 Thu 07/04/2022', '84079387.609', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.066830', '0.000000', '0.036760', '0.000000', '0.741800', '0.000000', '0.703950', '0.000000', '1.255700', '0.000000', '2.213050', '0.000000', '2.983500', '0.000000', '2.985250', '0.000000', '3.140100', '0.000000', '3.415300', '0.000000', '3.449850', '0.000000', '3.144750', '0.000000', '2.859600', '0.000000', '2.685850', '0.000000', '3.200550', '0.000000', '2.425800', '0.000000', '2.163900', '0.000000', '1.110500', '0.000000', '0.995000', '0.000000', '0.985400', '0.000000', '0.696800', '0.000000', '0.343965', '0.000000', '0.430185', '0.000000', '0.340685', '0.000000', '0.215565', '0.000000', '0.091900', '0.000000', '0.004118', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000']
      ]

      results = Amr::DataFeedTranslator.new(eft_config, readings).perform

      expect(results.size).to eq(2)

      expect(results.first[:meter_id]).to eq(meter_1.id)
      expect(results.first[:mpan_mprn]).to eq(meter_1.mpan_mprn.to_s)
      expect(results.first[:meter_serial_number]).to eq('10070831')

      expect(results.second[:meter_id]).to eq(meter_2.id)
      expect(results.second[:mpan_mprn]).to eq(meter_2.mpan_mprn.to_s)
      expect(results.second[:meter_serial_number]).to eq('10070839')
    end

    it 'handles missing meter' do
      readings = [
        ['1234', '1234', '00:13:07 Thu 07/04/2022', '83294159.417', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.121895', '0.000000', '0.399635', '0.000000', '0.756100', '0.000000', '1.137950', '0.000000', '1.524650', '0.000000', '1.825500', '0.000000', '1.618100', '0.000000', '1.478200', '0.000000', '2.088200', '0.000000', '2.045800', '0.000000', '2.190850', '0.000000', '2.860450', '0.000000', '2.912200', '0.000000', '1.213350', '0.000000', '1.885650', '0.000000', '2.116800', '0.000000', '1.517650', '0.000000', '1.855550', '0.000000', '1.435450', '0.000000', '1.340200', '0.000000', '0.933100', '0.000000', '0.760450', '0.000000', '0.548250', '0.000000', '0.110745', '0.000000', '0.035366', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000'],
        ['5678', '5678', '00:10:58 Thu 07/04/2022', '84079387.609', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.066830', '0.000000', '0.036760', '0.000000', '0.741800', '0.000000', '0.703950', '0.000000', '1.255700', '0.000000', '2.213050', '0.000000', '2.983500', '0.000000', '2.985250', '0.000000', '3.140100', '0.000000', '3.415300', '0.000000', '3.449850', '0.000000', '3.144750', '0.000000', '2.859600', '0.000000', '2.685850', '0.000000', '3.200550', '0.000000', '2.425800', '0.000000', '2.163900', '0.000000', '1.110500', '0.000000', '0.995000', '0.000000', '0.985400', '0.000000', '0.696800', '0.000000', '0.343965', '0.000000', '0.430185', '0.000000', '0.340685', '0.000000', '0.215565', '0.000000', '0.091900', '0.000000', '0.004118', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000']
      ]

      results = Amr::DataFeedTranslator.new(eft_config, readings).perform

      expect(results.size).to eq(2)

      expect(results.first[:meter_id]).to be_nil
      expect(results.first[:mpan_mprn]).to be_nil
      expect(results.first[:meter_serial_number]).to eq('1234')

      expect(results.second[:meter_id]).to be_nil
      expect(results.second[:mpan_mprn]).to be_nil
      expect(results.second[:meter_serial_number]).to eq('5678')
    end

    it 'raises error if duplicate serial numbers found' do
      create(:solar_pv_meter, meter_serial_number: meter_1.meter_serial_number)

      readings = [
        ['10070831', '10070831', '00:13:07 Thu 07/04/2022', '83294159.417', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.121895', '0.000000', '0.399635', '0.000000', '0.756100', '0.000000', '1.137950', '0.000000', '1.524650', '0.000000', '1.825500', '0.000000', '1.618100', '0.000000', '1.478200', '0.000000', '2.088200', '0.000000', '2.045800', '0.000000', '2.190850', '0.000000', '2.860450', '0.000000', '2.912200', '0.000000', '1.213350', '0.000000', '1.885650', '0.000000', '2.116800', '0.000000', '1.517650', '0.000000', '1.855550', '0.000000', '1.435450', '0.000000', '1.340200', '0.000000', '0.933100', '0.000000', '0.760450', '0.000000', '0.548250', '0.000000', '0.110745', '0.000000', '0.035366', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000'],
      ]

      expect do
        Amr::DataFeedTranslator.new(eft_config, readings).perform
      end.to raise_error(Amr::DataFeedException)
    end
  end
end
