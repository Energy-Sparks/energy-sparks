require 'rails_helper'

describe Amr::DataFeedTranslator do

  let(:sheffield_config) { build(:amr_data_feed_config,
      description: 'Sheffield',
      date_format: "%d/%m/%Y",
      mpan_mprn_field: 'MPAN',
      units_field: 'units',
      reading_date_field: 'ConsumptionDate',
      reading_fields:   "kWh_1,kWh_2,kWh_3,kWh_4,kWh_5,kWh_6,kWh_7,kWh_8,kWh_9,kWh_10,kWh_11,kWh_12,kWh_13,kWh_14,kWh_15,kWh_16,kWh_17,kWh_18,kWh_19,kWh_20,kWh_21,kWh_22,kWh_23,kWh_24,kWh_25,kWh_26,kWh_27,kWh_28,kWh_29,kWh_30,kWh_31,kWh_32,kWh_33,kWh_34,kWh_35,kWh_36,kWh_37,kWh_38,kWh_39,kWh_40,kWh_41,kWh_42,kWh_43,kWh_44,kWh_45,kWh_46,kWh_47,kWh_48".split(','),
      meter_description_field: 'siteRef',
      header_example: "siteRef,MPAN,ConsumptionDate,units,kWh_1,kWh_2,kWh_3,kWh_4,kWh_5,kWh_6,kWh_7,kWh_8,kWh_9,kWh_10,kWh_11,kWh_12,kWh_13,kWh_14,kWh_15,kWh_16,kWh_17,kWh_18,kWh_19,kWh_20,kWh_21,kWh_22,kWh_23,kWh_24,kWh_25,kWh_26,kWh_27,kWh_28,kWh_29,kWh_30,kWh_31,kWh_32,kWh_33,kWh_34,kWh_35,kWh_36,kWh_37,kWh_38,kWh_39,kWh_40,kWh_41,kWh_42,kWh_43,kWh_44,kWh_45,kWh_46,kWh_47,kWh_48,kVArh_1,kVArh_2,kVArh_3,kVArh_4,kVArh_5,kVArh_6,kVArh_7,kVArh_8,kVArh_9,kVArh_10,kVArh_11,kVArh_12,kVArh_13,kVArh_14,kVArh_15,kVArh_16,kVArh_17,kVArh_18,kVArh_19,kVArh_20,kVArh_21,kVArh_22,kVArh_23,kVArh_24,kVArh_25,kVArh_26,kVArh_27,kVArh_28,kVArh_29,kVArh_30,kVArh_31,kVArh_32,kVArh_33,kVArh_34,kVArh_35,kVArh_36,kVArh_37,kVArh_38,kVArh_39,kVArh_40,kVArh_41,kVArh_42,kVArh_43,kVArh_44,kVArh_45,kVArh_46,kVArh_47,kVArh_48"
    )
  }

  it 'converts array rows to a keyed hash' do

    readings = [
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', 'kwh','1.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ]

    result = Amr::DataFeedTranslator.new(sheffield_config, readings).perform.first

    expect(result[:mpan_mprn]).to eq('2333300681718')
    expect(result[:reading_date]).to eq('31/12/2019')
    expect(result[:description]).to eq('MEERSBROOK PRIMARY - M1')
    expect(result[:readings].first).to eq('1.20800000')
    expect(result[:readings].last).to eq('1.17700000')
  end

  it 'removes rows that do not match the expected_units' do
    sheffield_config.expected_units = 'kwh'
    readings = [
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', 'kwh','1.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', 'LEAD','2.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ]

    results = Amr::DataFeedTranslator.new(sheffield_config, readings).perform

    expect(results.size).to eq(1)
    expect(results.first[:readings].first).to eq('1.20800000')
  end

  context 'for EfT solar feed' do

    let(:eft_config) { build(:amr_data_feed_config,
        description: 'EfT',
        date_format: "%d/%m/%Y",
        mpan_mprn_field: 'Meter',
        units_field: 'units',
        reading_date_field: 'DateTime',
        reading_fields:   "import0000,import0030,import0100,import0130,import0200,import0230,import0300,import0330,import0400,import0430,import0500,import0520,import0600,import0630,import0700,import0730,import0800,import0830,import0900,import0930,import1000,import1030,import1100,import1130,import1200,import1230,import1300,import1330,import1400,import1430,import1500,import1530,import1600,import1630,import1700,import1730,import1800,import1830,import1900,import1930,import2000,import2030,import2100,import2130,import2200,import2230,import2300,import2330".split(','),
        meter_description_field: 'siteRef',
        header_example: "Description,MeterSerial,DateTime,import_total,export_total,import0000,export0000,import0030,export0030,import0100,export0100,import0130,export0130,import0200,export0200,import0230,export0230,import0300,export0300,import0330,export0330,import0400,export0400,import0430,export0430,import0500,export0500,import0520,export0520,import0600,export0600,import0630,export0630,import0700,export0700,import0730,export0730,import0800,export0800,import0830,export0830,import0900,export0900,import0930,export0930,import1000,export1000,import1030,export1030,import1100,export1100,import1130,export1130,import1200,export1200,import1230,export1230,import1300,export1300,import1330,export1330,import1400,export1400,import1430,export1430,import1500,export1500,import1530,export1530,import1600,export1600,import1630,export1630,import1700,export1700,import1730,export1730,import1800,export1800,import1830,export1830,import1900,export1900,import1930,export1930,import2000,export2000,import2030,export2030,import2100,export2100,import2130,export2130,import2200,export2200,import2230,export2230,import2300,export2300,import2330,export2330",
        expected_units: ''
      )
    }

    it 'picks imports only, from every other column' do
      readings = [
        ['10070831', '10070831', '00:13:07 Thu 07/04/2022', '83294159.417', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.121895', '0.000000', '0.399635', '0.000000', '0.756100', '0.000000', '1.137950', '0.000000', '1.524650', '0.000000', '1.825500', '0.000000', '1.618100', '0.000000', '1.478200', '0.000000', '2.088200', '0.000000', '2.045800', '0.000000', '2.190850', '0.000000', '2.860450', '0.000000', '2.912200', '0.000000', '1.213350', '0.000000', '1.885650', '0.000000', '2.116800', '0.000000', '1.517650', '0.000000', '1.855550', '0.000000', '1.435450', '0.000000', '1.340200', '0.000000', '0.933100', '0.000000', '0.760450', '0.000000', '0.548250', '0.000000', '0.110745', '0.000000', '0.035366', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000'],
        ['10070839', '10070839', '00:10:58 Thu 07/04/2022', '84079387.609', '0', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.066830', '0.000000', '0.036760', '0.000000', '0.741800', '0.000000', '0.703950', '0.000000', '1.255700', '0.000000', '2.213050', '0.000000', '2.983500', '0.000000', '2.985250', '0.000000', '3.140100', '0.000000', '3.415300', '0.000000', '3.449850', '0.000000', '3.144750', '0.000000', '2.859600', '0.000000', '2.685850', '0.000000', '3.200550', '0.000000', '2.425800', '0.000000', '2.163900', '0.000000', '1.110500', '0.000000', '0.995000', '0.000000', '0.985400', '0.000000', '0.696800', '0.000000', '0.343965', '0.000000', '0.430185', '0.000000', '0.340685', '0.000000', '0.215565', '0.000000', '0.091900', '0.000000', '0.004118', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000', '0.000000']
      ]

      results = Amr::DataFeedTranslator.new(eft_config, readings).perform

      expect(results.size).to eq(2)
      expect(results.first[:readings][12]).to eq('0.121895')
      expect(results.first[:readings][13]).to eq('0.399635')
    end

  end
end
