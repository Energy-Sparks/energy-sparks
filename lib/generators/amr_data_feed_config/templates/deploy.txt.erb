namespace :after_party do
  desc '<%= task_description %>'
  task <%= file_name %>: :environment do
    puts "Running deploy task '<%= file_name %>'"

    # For row per day CSV/Excel feeds use the below template adding the
    # correct number of header rows, actual date format, and the actual
    # header and list of reading fields. Other optional fields, including filters
    # can be defined
    #
    # For formats that use serial numbers:
    #
    # lookup_by_serial_number: true
    # mpan_mprn_field: ''
    # msn_field: ''
    #
    # For row per reading formats add:
    #
    # row_per_reading: true
    #
    # Then, if there is a separate time or period field then also add:
    #
    # positional_index: true
    # period_field: ''
    # reading_time_field: ''
    # half_hourly_labelling: :start/:end
    #
    identifier = '<%= name %>'
    AmrDataFeedConfig.create!({
      identifier: identifier,
      description: '<%= options.description %>',
      notes: '',
      number_of_header_rows: 1,
      mpan_mprn_field: 'MPRN',
      reading_date_field: 'Date',
      date_format: '%d/%m/%Y',
      header_example: 'MPRN,Date,00:30,01:00,01:30,02:00,02:30,03:00,03:30,04:00,04:30,05:00,05:30,06:00,06:30,07:00,07:30,08:00,08:30,09:00,09:30,10:00,10:30,11:00,11:30,12:00,12:30,13:00,13:30,14:00,14:30,15:00,15:30,16:00,16:30,17:00,17:30,18:00,18:30,19:00,19:30,20:00,20:30,21:00,21:30,22:00,22:30,23:00,23:30,00:00',
      reading_fields: '00:30,01:00,01:30,02:00,02:30,03:00,03:30,04:00,04:30,05:00,05:30,06:00,06:30,07:00,07:30,08:00,08:30,09:00,09:30,10:00,10:30,11:00,11:30,12:00,12:30,13:00,13:30,14:00,14:30,15:00,15:30,16:00,16:30,17:00,17:30,18:00,18:30,19:00,19:30,20:00,20:30,21:00,21:30,22:00,22:30,23:00,23:30,00:00'.split(',')
    }) unless AmrDataFeedConfig.find_by_identifier(identifier)

    # Update task as completed.  If you remove the line below, the task will
    # run with every deploy (or every time you call after_party:run).
    AfterParty::TaskRecord
      .create version: AfterParty::TaskRecorder.new(__FILE__).timestamp
  end
end
